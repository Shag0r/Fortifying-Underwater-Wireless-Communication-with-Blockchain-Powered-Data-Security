# -*- coding: utf-8 -*-
"""Full version.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i3pMLQvbCVyzJAzfy7QuiGY6SAxDxCIg
"""

import os
import random
import csv
import networkx as nx
import matplotlib.pyplot as plt

class IoUTDevice:
    def __init__(self, device_id, location, data_type, file_name):
        self.device_id = device_id
        self.location = location
        self.data = {}
        self.authenticated = False
        self.data_type = data_type
        self.file_name = file_name
        self.acoustic_protocol = "ACP"  # Protocol for underwater acoustic communication

    def generate_data(self):
        if self.data_type == "water":
            pressure = random.uniform(1000, 2000)
            ph_value = random.uniform(6, 9)
            temperature = random.uniform(0, 30)
            velocity = random.uniform(0, 10)
            self.data = {
                "Pressure": pressure,
                "pH Value": ph_value,
                "Temperature": temperature,
                "Velocity": velocity
            }
        elif self.data_type == "light":
            light_intensity = random.uniform(100, 1000)
            object_image = "placeholder_image_data"  # Placeholder for image data
            self.data = {
                "Light Intensity": light_intensity,
                "Object Image": object_image
            }

    def save_to_csv(self):
        with open(self.file_name, 'a', newline='') as csvfile:
            csvwriter = csv.writer(csvfile)
            if not self.data:
                return
            if not os.path.exists(self.file_name) or not csvfile.tell():
                csvwriter.writerow(list(self.data.keys()))
            csvwriter.writerow(list(self.data.values()))
            if not os.path.exists(self.file_name) or not csvfile.tell():
                csvwriter.writerow(["Device ID", "Source", *list(self.data.keys())[2:]])

    def authenticate(self):
        self.authenticated = True

    def transmit_data(self, receivers):
        if self.authenticated:
            for receiver in receivers:
                message = {"protocol": self.acoustic_protocol, "sender_id": self.device_id, "data": self.data}
                receiver.receive_acoustic_data(message)
        else:
            print(f"Unauthorized data transmission from Device {self.device_id} to {receivers[0].location}: {self.data}")

    def receive_acoustic_data(self, message):
        protocol = message["protocol"]
        sender_id = message["sender_id"]
        received_data = message["data"]

        if protocol == "ACP":
            print(f"Device {self.device_id} at {self.location} received ACP data from {sender_id}: {received_data}")
            self.data.update(received_data)
            self.save_to_csv()
        else:
            print(f"Unknown protocol received by Device {self.device_id}: {protocol}")

# Create PS node for water data
ps = IoUTDevice("PS", "Central Node PS", "water", "ps_data.csv")
ps.authenticate()

# Create SP node for light data
sp = IoUTDevice("SP", "Central Node SP", "light", "sp_data.csv")
sp.authenticate()

# Create M node for receiving data from SP and PS
m = IoUTDevice("M", "Node M", "combined", "m_data.csv")
m.authenticate()

# Create IoUT devices
iout_devices = []
for i in range(1, 11):
    if i <= 5:
        device = IoUTDevice(f"D{i}", f"Location_{i}", "water", f"water_device_{i}_data.csv")
    else:
        device = IoUTDevice(f"D{i}", f"Location_{i}", "light", f"light_device_{i}_data.csv")
    device.generate_data()
    device.save_to_csv()
    device.authenticate()
    iout_devices.append(device)

# Transmit data from IoUT devices to PS for water and SP for light
for device in iout_devices:
    if device.data_type == "water":
        device.transmit_data([ps])
    else:
        device.transmit_data([sp])

# Transmit data from SP and PS to M
sp.transmit_data([m])
ps.transmit_data([m])

# Create a directed graph for data transmission
graph = nx.DiGraph()
for device in iout_devices + [ps, sp, m]:
    graph.add_node(device.device_id, location=device.location, data_type=device.data_type)
    if device.data_type != "combined":
        graph.add_edge(device.device_id, device.data_type.upper(), data=device.data)
# Add edges for PS and SP to M
graph.add_edge("PS", "M", data=ps.data)
graph.add_edge("SP", "M", data=sp.data)

# Draw the combined directed graph
pos = nx.spring_layout(graph, seed=42)
plt.figure(figsize=(12, 8))
nx.draw(graph, pos, with_labels=True, node_size=2000, node_color='skyblue', font_size=10, font_weight='bold', arrows=True, connectionstyle='arc3,rad=0.1')
edge_labels = nx.get_edge_attributes(graph, 'data')
nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels)

plt.title("Data Transmission between IoUT Devices, SP, PS, and M")
plt.show()